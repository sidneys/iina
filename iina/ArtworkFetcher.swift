//
//  ArtworkFetcher.swift
//  iina
//
//  Created by Sidney Bofah on 15.05.19.
//  Copyright Â© 2019 lhc. All rights reserved.
//

import Cocoa
import QuickLook
import AVFoundation

fileprivate let LogLabel = "Artwork Fetcher"
fileprivate let QuicklookSize = 512

class ArtworkFetcher: NSObject {

  /**
   YouTube artwork fetcher.
   Downloads high-resolution thumbnail images for content hosted on youtube.com.

   - parameters:
     - url: YouTube video URL
     - callback: Completion handler
   */
  static func fetchYoutube(_ url: String, callback: @escaping FetcherTask.FetchCallback) {

    // Setup Logger
    let provider = FetcherTask.FetchProvider.quicklook
    let subsystem = Logger.Subsystem(rawValue: "\(LogLabel):\(provider)")

    // Extract video id from video URL
    guard let id = Regex.youtube.captures(in: url)[at: 1] else {
      callback(.error(FetcherTask.FetchError("Could not parse video id", provider)))
      return
    }

    // Assemble thumbnail URL
    let youtubeUrl = URL(string: "https://img.youtube.com/vi/\(id)/maxresdefault.jpg")!

    // Download thumbnail image
    URLSession.shared.dataTask(with: youtubeUrl, completionHandler: { (data, response, error) -> Void in
      if let data = data, let image = NSImage(data: data) {
        // Callback
        callback(.success(image))
        return
      }
      if let error = error {
        // Callback
        callback(.error(error))
      }
    }).resume()

    Logger.log("Fetched video thumbnail (\(youtubeUrl))", level: .debug, subsystem: subsystem)
  }


  /**
   QuickLook artwork fetcher.
   Uses QLGenerator to obtain Finder file previews generated by macOS.

   - parameters:
   - filename: Filesystem path to resource
   - callback: Completion handler
   */
  static func fetchQuicklook(_ filename: String, callback: @escaping FetcherTask.FetchCallback) {

    // Setup Logger
    let provider = FetcherTask.FetchProvider.youtube
    let subsystem = Logger.Subsystem(rawValue: "\(LogLabel):\(provider)")

    // Deploy in background thread, async
    DispatchQueue.global(qos: .background).async {
      // Generate file preview via QLGenerator (QuickLook)
      if let imageRef = QLThumbnailImageCreate(nil,
                                               URL(fileURLWithPath: filename) as CFURL,
                                               NSSize(width: QuicklookSize, height: QuicklookSize) as CGSize,
                                               [kQLThumbnailOptionIconModeKey: false] as CFDictionary) {
        // Render thumbnail
        let image = NSImage(cgImage: imageRef.takeUnretainedValue(), size: .zero)

        // Callback
        callback(.success(image))
      } else {
        // Callback
        callback(.error(FetcherTask.FetchError("Could not generate thumbnail file preview", provider)))
      }
    }

    Logger.log("Generated thumbnail file preview (\(QuicklookSize)x\(QuicklookSize)px)", level: .debug, subsystem: subsystem)
  }
}

class FetcherTask: NSObject {

  var provider: FetchProvider
  var filename: String

  enum FetchProvider: String {
    case youtube = "YouTube"
    case quicklook = "QuickLook"
    case avkit = "AVKit/AVFoundation"
    case generic = "Default"
  }

  struct FetchError: Error, LocalizedError {
    let message: String
    let provider: FetchProvider

    init(_ message: String, _ provider: FetchProvider? = .generic) {
      self.message = message
      self.provider = provider!
    }

    public var errorDescription: String? {
      return "[\(LogLabel)] [\(provider)] \(message)"
    }
  }

  enum FetchResult {
    case success(NSImage?)
    case error(Error?)
  }

  typealias FetchCallback = (FetchResult) -> Void

  /**
  Initialize Fetch Task

   - parameters:
   - filename: Filesystem path to resource
   - provider: Artwork provider adapter to resource
   */
  init(filename: String, provider:  FetchProvider? = .generic) {
    self.filename = filename
    self.provider = provider!
  }

  /**
   Execute Fetch Task

   - parameters:
   - callback: Completion handler
   */
  func execute(callback: @escaping (FetchResult) -> Void) {

    switch self.provider {
    case .youtube:
      ArtworkFetcher.fetchYoutube(self.filename, callback: callback)
    case .quicklook:
      ArtworkFetcher.fetchQuicklook(self.filename, callback: callback)
    case .avkit:
      print("avkit")
    // fetchAvkit(filename, callback: callback)
    case .generic:
      print("generic")
      // fetchGeneric(filename, callback: callback)
    }
  }
}

